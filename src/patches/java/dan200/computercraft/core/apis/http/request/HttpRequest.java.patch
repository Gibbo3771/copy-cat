--- original\CC-Tweaked\src\main\java\dan200\computercraft\core\apis\http\request\HttpRequest.java
+++ src\main\java\dan200\computercraft\core\apis\http\request\HttpRequest.java
@@ -5,38 +5,27 @@
  */
 package dan200.computercraft.core.apis.http.request;
 
+import cc.squiddev.cct.Main;
+import cc.squiddev.cct.mount.Int8ArrayByteChannel;
+import cc.squiddev.cct.stub.SeekableByteChannel;
 import dan200.computercraft.ComputerCraft;
 import dan200.computercraft.api.lua.ILuaObject;
 import dan200.computercraft.core.apis.IAPIEnvironment;
+import dan200.computercraft.core.apis.handles.ArrayByteChannel;
+import dan200.computercraft.core.apis.handles.BinaryReadableHandle;
+import dan200.computercraft.core.apis.handles.EncodedReadableHandle;
 import dan200.computercraft.core.apis.http.HTTPRequestException;
-import dan200.computercraft.core.apis.http.NetworkUtils;
 import dan200.computercraft.core.apis.http.Resource;
 import dan200.computercraft.core.apis.http.ResourceGroup;
-import dan200.computercraft.core.tracking.TrackingField;
-import io.netty.bootstrap.Bootstrap;
-import io.netty.buffer.ByteBuf;
-import io.netty.buffer.Unpooled;
-import io.netty.channel.ChannelFuture;
-import io.netty.channel.ChannelInitializer;
-import io.netty.channel.ChannelPipeline;
-import io.netty.channel.ConnectTimeoutException;
-import io.netty.channel.socket.SocketChannel;
-import io.netty.channel.socket.nio.NioSocketChannel;
-import io.netty.handler.codec.TooLongFrameException;
-import io.netty.handler.codec.http.*;
-import io.netty.handler.ssl.SslContext;
-import io.netty.handler.timeout.ReadTimeoutException;
-import io.netty.handler.timeout.ReadTimeoutHandler;
+import dan200.computercraft.shared.util.StringUtil;
+import org.teavm.jso.ajax.XMLHttpRequest;
+import org.teavm.jso.typedarrays.ArrayBuffer;
+import org.teavm.jso.typedarrays.Int8Array;
 
-import java.net.InetSocketAddress;
 import java.net.URI;
 import java.net.URISyntaxException;
-import java.nio.charset.StandardCharsets;
-import java.util.Locale;
+import java.util.HashMap;
 import java.util.Map;
-import java.util.concurrent.Future;
-import java.util.concurrent.TimeUnit;
-import java.util.concurrent.atomic.AtomicInteger;
 
 /**
  * Represents an in-progress HTTP request.
@@ -48,43 +37,34 @@
 
     private static final int MAX_REDIRECTS = 16;
 
-    private Future<?> executorFuture;
-    private ChannelFuture connectFuture;
-    private HttpRequestHandler currentRequest;
-
     private final IAPIEnvironment environment;
 
     private final String address;
-    private final ByteBuf postBuffer;
-    private final HttpHeaders headers;
+    private final String postBuffer;
+    private final Map<String, String> headers;
     private final boolean binary;
 
-    final AtomicInteger redirects;
-
-    public HttpRequest( ResourceGroup<HttpRequest> limiter, IAPIEnvironment environment, String address, String postText, HttpHeaders headers, boolean binary, boolean followRedirects )
+    public HttpRequest( ResourceGroup<HttpRequest> limiter, IAPIEnvironment environment, String address, String postText, Map<String, String> headers, boolean binary, boolean followRedirects )
     {
         super( limiter );
         this.environment = environment;
         this.address = address;
-        postBuffer = postText != null
-            ? Unpooled.wrappedBuffer( postText.getBytes( StandardCharsets.UTF_8 ) )
-            : Unpooled.buffer( 0 );
+        postBuffer = postText;
         this.headers = headers;
         this.binary = binary;
-        redirects = new AtomicInteger( followRedirects ? MAX_REDIRECTS : 0 );
 
         if( postText != null )
         {
-            if( !headers.contains( HttpHeaderNames.CONTENT_TYPE ) )
+            if( !headers.containsKey( "content-type" ) )
             {
-                headers.set( HttpHeaderNames.CONTENT_TYPE, "application/x-www-form-urlencoded; charset=utf-8" );
+                headers.put( "content-type", "application/x-www-form-urlencoded; charset=utf-8" );
             }
-
-            if( !headers.contains( HttpHeaderNames.CONTENT_LENGTH ) )
-            {
-                headers.set( HttpHeaderNames.CONTENT_LENGTH, postBuffer.readableBytes() );
-            }
         }
+
+        // We force some headers to be always applied
+        if( !headers.containsKey( "accept-charset" ) )headers.put( "accept-charset", "UTF-8" );
+
+        headers.put("x-requested-with", "XMLHttpRequest");
     }
 
     public IAPIEnvironment environment()
@@ -114,91 +94,84 @@
         if( url.getScheme() == null ) throw new HTTPRequestException( "Must specify http or https" );
         if( url.getHost() == null ) throw new HTTPRequestException( "URL malformed" );
 
-        String scheme = url.getScheme().toLowerCase( Locale.ROOT );
+        String scheme = url.getScheme().toLowerCase();
         if( !scheme.equalsIgnoreCase( "http" ) && !scheme.equalsIgnoreCase( "https" ) )
         {
             throw new HTTPRequestException( "Invalid protocol '" + scheme + "'" );
         }
-
-        NetworkUtils.checkHost( url.getHost() );
     }
 
-    public void request( URI uri, HttpMethod method )
+    public void request( URI uri, String method )
     {
         if( isClosed() ) return;
-        executorFuture = NetworkUtils.EXECUTOR.submit( () -> doRequest( uri, method ) );
+        doRequest( uri, method );
         checkClosed();
     }
 
-    private void doRequest( URI uri, HttpMethod method )
-    {
+    private void doRequest(URI uri, String method) {
         // If we're cancelled, abort.
         if( isClosed() ) return;
 
-        try
-        {
-            boolean ssl = uri.getScheme().equalsIgnoreCase( "https" );
-            InetSocketAddress socketAddress = NetworkUtils.getAddress( uri.getHost(), uri.getPort(), ssl );
-            SslContext sslContext = ssl ? NetworkUtils.getSslContext() : null;
+        try {
+            XMLHttpRequest request = XMLHttpRequest.create();
+            request.setOnReadyStateChange(() -> {
+                if (request.getReadyState() != XMLHttpRequest.DONE) return;
+                if (request.getStatus() == 0) {
+                    failure("Could not connect");
+                    return;
+                }
 
-            // getAddress may have a slight delay, so let's perform another cancellation check.
-            if( isClosed() ) return;
+                ILuaObject reader;
+                if (binary) {
+                    ArrayBuffer buffer = request.getResponse().cast();
+                    SeekableByteChannel contents = new Int8ArrayByteChannel(Int8Array.create(buffer));
+                    reader = new BinaryReadableHandle(contents);
+                } else {
+                    SeekableByteChannel contents = new ArrayByteChannel(StringUtil.encodeString(request.getResponseText()));
+                    reader = new EncodedReadableHandle(EncodedReadableHandle.openUtf8(contents));
+                }
 
-            // Add request size to the tracker before opening the connection
-            environment.addTrackingChange( TrackingField.HTTP_REQUESTS, 1 );
-            environment.addTrackingChange( TrackingField.HTTP_UPLOAD, getHeaderSize( headers ) + postBuffer.capacity() );
+                Map<String, String> responseHeaders = new HashMap<>();
+                for (String header : request.getAllResponseHeaders().split("\r\n")) {
+                    int index = header.indexOf(':');
+                    if (index < 0) continue;
 
-            HttpRequestHandler handler = currentRequest = new HttpRequestHandler( this, uri, method );
-            connectFuture = new Bootstrap()
-                .group( NetworkUtils.LOOP_GROUP )
-                .channelFactory( NioSocketChannel::new )
-                .handler( new ChannelInitializer<SocketChannel>()
-                {
-                    @Override
-                    protected void initChannel( SocketChannel ch )
-                    {
+                    // Normalise the header (so "content-type" becomes "Content-Type")
+                    boolean upcase = true;
+                    StringBuilder headerBuilder = new StringBuilder(index);
+                    for (int i = 0; i < index; i++) {
+                        char c = header.charAt(i);
+                        headerBuilder.append(upcase ? Character.toUpperCase(c) : c);
+                        upcase = c == '-';
+                    }
+                    responseHeaders.put(headerBuilder.toString(), header.substring(index + 1).trim());
+                }
 
-                        if( ComputerCraft.httpTimeout > 0 )
-                        {
-                            ch.config().setConnectTimeoutMillis( ComputerCraft.httpTimeout );
-                        }
+                ILuaObject stream = new HttpResponseHandle(reader, request.getStatus(), request.getStatusText(), responseHeaders);
+                if (request.getStatus() >= 200 && request.getStatus() < 400) {
+                    success(stream);
+                } else {
+                    failure(request.getStatusText(), stream);
+                }
+            });
 
-                        ChannelPipeline p = ch.pipeline();
-                        if( sslContext != null )
-                        {
-                            p.addLast( sslContext.newHandler( ch.alloc(), uri.getHost(), socketAddress.getPort() ) );
-                        }
+            request.setResponseType(binary ? "arraybuffer" : "text");
 
-                        if( ComputerCraft.httpTimeout > 0 )
-                        {
-                            p.addLast( new ReadTimeoutHandler( ComputerCraft.httpTimeout, TimeUnit.MILLISECONDS ) );
-                        }
+            String address = uri.toASCIIString();
+            request.open(method, Main.corsProxy.isEmpty() ? address : Main.corsProxy.replace("{}", address));
+            for (Map.Entry<String, String> header : headers.entrySet()) {
+                request.setRequestHeader(header.getKey(), header.getValue());
+            }
+            request.send(postBuffer);
 
-                        p.addLast(
-                            new HttpClientCodec(),
-                            new HttpContentDecompressor(),
-                            handler
-                        );
-                    }
-                } )
-                .remoteAddress( socketAddress )
-                .connect()
-                .addListener( c -> {
-                    if( !c.isSuccess() ) failure( c.cause() );
-                } );
-
             // Do an additional check for cancellation
             checkClosed();
         }
-        catch( HTTPRequestException e )
+        catch (Exception e)
         {
-            failure( e.getMessage() );
+            failure("Could not connect");
+            if (ComputerCraft.logPeripheralErrors) ComputerCraft.log.error("Error in HTTP request", e);
         }
-        catch( Exception e )
-        {
-            failure( "Could not connect" );
-            if( ComputerCraft.logPeripheralErrors ) ComputerCraft.log.error( "Error in HTTP request", e );
-        }
     }
 
     void failure( String message )
@@ -213,14 +186,6 @@
         {
             message = cause.getMessage();
         }
-        else if( cause instanceof TooLongFrameException )
-        {
-            message = "Response is too large";
-        }
-        else if( cause instanceof ReadTimeoutException || cause instanceof ConnectTimeoutException )
-        {
-            message = "Timed out";
-        }
         else
         {
             message = "Could not connect";
@@ -243,16 +208,12 @@
     protected void dispose()
     {
         super.dispose();
-
-        executorFuture = closeFuture( executorFuture );
-        connectFuture = closeChannel( connectFuture );
-        currentRequest = closeCloseable( currentRequest );
     }
 
-    public static long getHeaderSize( HttpHeaders headers )
+    public static long getHeaderSize( Map<String, String> headers )
     {
         long size = 0;
-        for( Map.Entry<String, String> header : headers )
+        for( Map.Entry<String, String> header : headers.entrySet() )
         {
             size += header.getKey() == null ? 0 : header.getKey().length();
             size += header.getValue() == null ? 0 : header.getValue().length() + 1;
@@ -260,12 +221,12 @@
         return size;
     }
 
-    public ByteBuf body()
+    public String body()
     {
         return postBuffer;
     }
 
-    public HttpHeaders headers()
+    public Map<String, String> headers()
     {
         return headers;
     }
