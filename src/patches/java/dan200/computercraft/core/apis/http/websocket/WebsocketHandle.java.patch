--- original\CC-Tweaked\src\main\java\dan200\computercraft\core\apis\http\websocket\WebsocketHandle.java
+++ src\main\java\dan200\computercraft\core\apis\http\websocket\WebsocketHandle.java
@@ -6,17 +6,14 @@
 
 package dan200.computercraft.core.apis.http.websocket;
 
+import cc.squiddev.cct.js.WebsocketClient;
 import com.google.common.base.Objects;
 import dan200.computercraft.ComputerCraft;
 import dan200.computercraft.api.lua.ILuaContext;
 import dan200.computercraft.api.lua.ILuaObject;
 import dan200.computercraft.api.lua.LuaException;
 import dan200.computercraft.core.tracking.TrackingField;
-import dan200.computercraft.shared.util.StringUtil;
-import io.netty.buffer.Unpooled;
-import io.netty.channel.Channel;
-import io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame;
-import io.netty.handler.codec.http.websocketx.TextWebSocketFrame;
+import org.teavm.jso.typedarrays.Int8Array;
 
 import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
@@ -32,9 +29,9 @@
     private final Websocket websocket;
     private boolean closed = false;
 
-    private Channel channel;
+    private WebsocketClient channel;
 
-    public WebsocketHandle( Websocket websocket, Channel channel )
+    public WebsocketHandle( Websocket websocket, WebsocketClient channel )
     {
         this.websocket = websocket;
         this.channel = channel;
@@ -81,12 +78,18 @@
                 boolean binary = optBoolean( arguments, 1, false );
                 websocket.environment().addTrackingChange( TrackingField.WEBSOCKET_OUTGOING, text.length() );
 
-                Channel channel = this.channel;
+                WebsocketClient channel = this.channel;
                 if( channel != null )
                 {
-                    channel.writeAndFlush( binary
-                        ? new BinaryWebSocketFrame( Unpooled.wrappedBuffer( StringUtil.encodeString( text ) ) )
-                        : new TextWebSocketFrame( text ) );
+                    if (binary) {
+                        Int8Array array = Int8Array.create(text.length());
+                        for (int i = 0; i < array.getLength(); i++) {
+                            char c = text.charAt(i);
+                            array.set(i, c < 256 ? (byte) c : 63);
+                        }
+                    } else {
+                        channel.send(text);
+                    }
                 }
 
                 return null;
@@ -111,7 +114,7 @@
     {
         closed = true;
 
-        Channel channel = this.channel;
+        WebsocketClient channel = this.channel;
         if( channel != null )
         {
             channel.close();
