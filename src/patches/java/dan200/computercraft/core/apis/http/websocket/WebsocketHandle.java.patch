--- original\CC-Tweaked\src\main\java\dan200\computercraft\core\apis\http\websocket\WebsocketHandle.java
+++ src\main\java\dan200\computercraft\core\apis\http\websocket\WebsocketHandle.java
@@ -6,17 +6,16 @@
 
 package dan200.computercraft.core.apis.http.websocket;
 
+import cc.squiddev.cct.http.WebsocketReceiveFunction;
+import cc.squiddev.cct.js.WebsocketClient;
 import com.google.common.base.Objects;
 import dan200.computercraft.ComputerCraft;
 import dan200.computercraft.api.lua.ILuaContext;
 import dan200.computercraft.api.lua.ILuaObject;
 import dan200.computercraft.api.lua.LuaException;
 import dan200.computercraft.core.tracking.TrackingField;
-import dan200.computercraft.shared.util.StringUtil;
-import io.netty.buffer.Unpooled;
-import io.netty.channel.Channel;
-import io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame;
-import io.netty.handler.codec.http.websocketx.TextWebSocketFrame;
+import org.squiddev.cobalt.LuaTable;
+import org.teavm.jso.typedarrays.Int8Array;
 
 import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
@@ -30,11 +29,11 @@
 public class WebsocketHandle implements ILuaObject, Closeable
 {
     private final Websocket websocket;
-    private boolean closed = false;
+    public boolean closed = false;
 
-    private Channel channel;
+    private WebsocketClient channel;
 
-    public WebsocketHandle( Websocket websocket, Channel channel )
+    public WebsocketHandle( Websocket websocket, WebsocketClient channel )
     {
         this.websocket = websocket;
         this.channel = channel;
@@ -54,6 +53,8 @@
         switch( method )
         {
             case 0: // receive
+                throw new LuaException("Illegal call to .receive(). This method should have been replaced.");
+                /*
                 checkOpen();
                 while( true )
                 {
@@ -67,6 +68,7 @@
                         return null;
                     }
                 }
+                */
 
             case 1: // send
             {
@@ -81,12 +83,19 @@
                 boolean binary = optBoolean( arguments, 1, false );
                 websocket.environment().addTrackingChange( TrackingField.WEBSOCKET_OUTGOING, text.length() );
 
-                Channel channel = this.channel;
+                WebsocketClient channel = this.channel;
                 if( channel != null )
                 {
-                    channel.writeAndFlush( binary
-                        ? new BinaryWebSocketFrame( Unpooled.wrappedBuffer( StringUtil.encodeString( text ) ) )
-                        : new TextWebSocketFrame( text ) );
+                    if (binary) {
+                        Int8Array array = Int8Array.create(text.length());
+                        for (int i = 0; i < array.getLength(); i++) {
+                            char c = text.charAt(i);
+                            array.set(i, c < 256 ? (byte) c : 63);
+                        }
+                        channel.send(array.getBuffer());
+                    } else {
+                        channel.send(text);
+                    }
                 }
 
                 return null;
@@ -111,11 +120,16 @@
     {
         closed = true;
 
-        Channel channel = this.channel;
+        WebsocketClient channel = this.channel;
         if( channel != null )
         {
             channel.close();
             this.channel = null;
         }
     }
+
+    @Override
+    public void overwriteLuaTable(LuaTable table) {
+        table.rawset("receive", new WebsocketReceiveFunction(this, websocket));
+    }
 }
