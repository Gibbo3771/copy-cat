--- original\CC-Tweaked\src\main\java\dan200\computercraft\core\apis\http\websocket\Websocket.java
+++ src\main\java\dan200\computercraft\core\apis\http\websocket\Websocket.java
@@ -5,35 +5,21 @@
  */
 package dan200.computercraft.core.apis.http.websocket;
 
+import cc.squiddev.cct.js.WebsocketClient;
+import cc.squiddev.cct.stub.Logger;
 import com.google.common.base.Strings;
 import dan200.computercraft.ComputerCraft;
 import dan200.computercraft.core.apis.IAPIEnvironment;
 import dan200.computercraft.core.apis.http.HTTPRequestException;
-import dan200.computercraft.core.apis.http.NetworkUtils;
 import dan200.computercraft.core.apis.http.Resource;
 import dan200.computercraft.core.apis.http.ResourceGroup;
 import dan200.computercraft.shared.util.IoUtil;
-import io.netty.bootstrap.Bootstrap;
-import io.netty.channel.Channel;
-import io.netty.channel.ChannelFuture;
-import io.netty.channel.ChannelInitializer;
-import io.netty.channel.ChannelPipeline;
-import io.netty.channel.socket.SocketChannel;
-import io.netty.channel.socket.nio.NioSocketChannel;
-import io.netty.handler.codec.http.HttpClientCodec;
-import io.netty.handler.codec.http.HttpHeaders;
-import io.netty.handler.codec.http.HttpObjectAggregator;
-import io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker;
-import io.netty.handler.codec.http.websocketx.WebSocketClientHandshakerFactory;
-import io.netty.handler.codec.http.websocketx.WebSocketVersion;
-import io.netty.handler.codec.http.websocketx.extensions.compression.WebSocketClientCompressionHandler;
-import io.netty.handler.ssl.SslContext;
+import org.teavm.jso.typedarrays.Int8Array;
 
 import java.lang.ref.WeakReference;
-import java.net.InetSocketAddress;
 import java.net.URI;
 import java.net.URISyntaxException;
-import java.util.concurrent.Future;
+import java.util.Map;
 
 /**
  * Provides functionality to verify and connect to a remote websocket.
@@ -47,16 +33,14 @@
     static final String CLOSE_EVENT = "websocket_closed";
     static final String MESSAGE_EVENT = "websocket_message";
 
-    private Future<?> executorFuture;
-    private ChannelFuture connectFuture;
     private WeakReference<WebsocketHandle> websocketHandle;
 
     private final IAPIEnvironment environment;
     private final URI uri;
     private final String address;
-    private final HttpHeaders headers;
+    private final Map<String, String> headers;
 
-    public Websocket( ResourceGroup<Websocket> limiter, IAPIEnvironment environment, URI uri, String address, HttpHeaders headers )
+    public Websocket( ResourceGroup<Websocket> limiter, IAPIEnvironment environment, URI uri, String address, Map<String, String> headers )
     {
         super( limiter );
         this.environment = environment;
@@ -106,14 +90,13 @@
             throw new HTTPRequestException( "Invalid scheme '" + scheme + "'" );
         }
 
-        NetworkUtils.checkHost( uri.getHost() );
         return uri;
     }
 
     public void connect()
     {
         if( isClosed() ) return;
-        executorFuture = NetworkUtils.EXECUTOR.submit( this::doConnect );
+        this.doConnect();
         checkClosed();
     }
 
@@ -124,54 +107,27 @@
 
         try
         {
-            boolean ssl = uri.getScheme().equalsIgnoreCase( "wss" );
+            WebsocketClient client = WebsocketClient.create(uri.toASCIIString());
+            client.setBinaryType("arraybuffer");
+            client.onOpen(e -> success(client));
+            client.onError(e -> ComputerCraft.log.error("Error " + e));
+            client.setOnMessage(e -> {
+                if (isClosed()) return;
 
-            InetSocketAddress socketAddress = NetworkUtils.getAddress( uri.getHost(), uri.getPort(), ssl );
-            SslContext sslContext = ssl ? NetworkUtils.getSslContext() : null;
-
-            // getAddress may have a slight delay, so let's perform another cancellation check.
-            if( isClosed() ) return;
-
-            connectFuture = new Bootstrap()
-                .group( NetworkUtils.LOOP_GROUP )
-                .channel( NioSocketChannel.class )
-                .handler( new ChannelInitializer<SocketChannel>()
-                {
-                    @Override
-                    protected void initChannel( SocketChannel ch )
-                    {
-                        ChannelPipeline p = ch.pipeline();
-                        if( sslContext != null )
-                        {
-                            p.addLast( sslContext.newHandler( ch.alloc(), uri.getHost(), socketAddress.getPort() ) );
-                        }
-
-                        WebSocketClientHandshaker handshaker = WebSocketClientHandshakerFactory.newHandshaker(
-                            uri, WebSocketVersion.V13, null, true, headers,
-                            ComputerCraft.httpMaxWebsocketMessage == 0 ? MAX_MESSAGE_SIZE : ComputerCraft.httpMaxWebsocketMessage
-                        );
-
-                        p.addLast(
-                            new HttpClientCodec(),
-                            new HttpObjectAggregator( 8192 ),
-                            WebSocketClientCompressionHandler.INSTANCE,
-                            new WebsocketHandler( Websocket.this, handshaker )
-                        );
-                    }
-                } )
-                .remoteAddress( socketAddress )
-                .connect()
-                .addListener( c -> {
-                    if( !c.isSuccess() ) failure( c.cause().getMessage() );
-                } );
-
-            // Do an additional check for cancellation
+                Object converted;
+                if (e.isBinary()) {
+                    Int8Array array = Int8Array.create(e.getDataAsArray());
+                    byte[] contents = new byte[array.getLength()];
+                    for (int i = 0; i < contents.length; i++) contents[i] = array.get(i);
+                    converted = contents;
+                } else {
+                    converted = e.getDataAsString();
+                }
+                environment.queueEvent(MESSAGE_EVENT, new Object[]{address, converted, true});
+            });
+            client.onClose(e -> close(e.getCode(), e.getReason()));
             checkClosed();
         }
-        catch( HTTPRequestException e )
-        {
-            failure( e.getMessage() );
-        }
         catch( Exception e )
         {
             failure( "Could not connect" );
@@ -179,7 +135,7 @@
         }
     }
 
-    void success( Channel channel )
+    void success( WebsocketClient channel )
     {
         if( isClosed() ) return;
 
@@ -201,7 +157,7 @@
         {
             environment.queueEvent( CLOSE_EVENT, new Object[] {
                 address,
-                Strings.isNullOrEmpty( reason ) ? null : reason,
+                reason == null || reason.isEmpty() ? null : reason,
                 status < 0 ? null : status,
             } );
         }
@@ -212,9 +168,6 @@
     {
         super.dispose();
 
-        executorFuture = closeFuture( executorFuture );
-        connectFuture = closeChannel( connectFuture );
-
         WeakReference<WebsocketHandle> websocketHandleRef = websocketHandle;
         WebsocketHandle websocketHandle = websocketHandleRef == null ? null : websocketHandleRef.get();
         if( websocketHandle != null ) IoUtil.closeQuietly( websocketHandle );
