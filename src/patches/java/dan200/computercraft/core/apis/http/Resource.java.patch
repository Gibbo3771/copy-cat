--- original\CC-Tweaked\src\main\java\dan200\computercraft\core\apis\http\Resource.java
+++ src\main\java\dan200\computercraft\core\apis\http\Resource.java
@@ -7,15 +7,12 @@
 package dan200.computercraft.core.apis.http;
 
 import dan200.computercraft.shared.util.IoUtil;
-import io.netty.channel.Channel;
-import io.netty.channel.ChannelFuture;
 
 import java.io.Closeable;
 import java.lang.ref.Reference;
 import java.lang.ref.ReferenceQueue;
 import java.lang.ref.WeakReference;
 import java.util.concurrent.Future;
-import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.function.Consumer;
 
 /**
@@ -25,7 +22,7 @@
  */
 public abstract class Resource<T extends Resource<T>> implements Closeable
 {
-    private final AtomicBoolean closed = new AtomicBoolean( false );
+    private boolean closed = false;
     private final ResourceGroup<T> limiter;
 
     protected Resource( ResourceGroup<T> limiter )
@@ -40,7 +37,7 @@
      */
     public final boolean isClosed()
     {
-        return closed.get();
+        return closed;
     }
 
     /**
@@ -50,7 +47,7 @@
      */
     public final boolean checkClosed()
     {
-        if( !closed.get() ) return false;
+        if( !closed ) return false;
         dispose();
         return true;
     }
@@ -62,7 +59,8 @@
      */
     protected final boolean tryClose()
     {
-        if( closed.getAndSet( true ) ) return false;
+        if( closed ) return false;
+        closed = true;
         dispose();
         return true;
     }
@@ -111,6 +109,7 @@
         return null;
     }
 
+    /*
     protected static ChannelFuture closeChannel( ChannelFuture future )
     {
         if( future != null )
@@ -122,6 +121,7 @@
 
         return null;
     }
+    */
 
     protected static <T extends Future<?>> T closeFuture( T future )
     {
