--- original\CC-Tweaked\src\main\java\dan200\computercraft\core\lua\CobaltLuaMachine.java
+++ src\main\java\dan200\computercraft\core\lua\CobaltLuaMachine.java
@@ -39,12 +39,14 @@
 
 public class CobaltLuaMachine implements ILuaMachine
 {
+    /*
     private static final ThreadPoolExecutor COROUTINES = new ThreadPoolExecutor(
         0, Integer.MAX_VALUE,
         5L, TimeUnit.MINUTES,
         new SynchronousQueue<>(),
         ThreadUtils.factory( "Coroutine" )
     );
+    */
 
     private final Computer m_computer;
     private final TimeoutState timeout;
@@ -67,6 +69,7 @@
         LuaState state = m_state = LuaState.builder()
             .resourceManipulator( new VoidResourceManipulator() )
             .debug( debug )
+            /*
             .coroutineExecutor( command -> {
                 Tracking.addValue( m_computer, TrackingField.COROUTINES_CREATED, 1 );
                 COROUTINES.execute( () -> {
@@ -80,6 +83,7 @@
                     }
                 } );
             } )
+            */
             .build();
 
         m_globals = new LuaTable();
@@ -258,6 +262,7 @@
                 } );
             }
         }
+        object.overwriteLuaTable( table );
         return table;
     }
 
@@ -308,7 +313,6 @@
             return table;
         }
 
-        if( object instanceof Object[] )
         {
             Object[] objects = (Object[]) object;
             LuaTable table = new LuaTable( objects.length, 0 );
@@ -317,18 +321,22 @@
             return table;
         }
 
+        // String[] is not an instance of Object[] under TeaVM. So instead, we abuse the lack of
+        // cast assertions and just assume what we're doing is correct.
+        /*
         if( ComputerCraft.logPeripheralErrors )
         {
-            ComputerCraft.log.warn( "Received unknown type '{}', returning nil.", object.getClass().getName() );
+            ComputerCraft.log.warn( "Received unknown type, returning nil." );
         }
         return Constants.NIL;
+        */
     }
 
     private Varargs toValues( Object[] objects )
     {
         if( objects == null || objects.length == 0 ) return Constants.NONE;
 
-        Map<Object, LuaValue> result = new IdentityHashMap<>( 0 );
+        Map<Object, LuaValue> result = new HashMap<>( 0 );
         LuaValue[] values = new LuaValue[objects.length];
         for( int i = 0; i < values.length; i++ )
         {
@@ -475,7 +483,6 @@
             if( timeout.isHardAborted() || state == null ) throw HardAbortError.INSTANCE;
 
             timeout.refresh();
-            if( timeout.isPaused() ) LuaThread.suspendBlocking( state );
             handleSoftAbort();
         }
 
@@ -501,24 +508,26 @@
     {
         @Nonnull
         @Override
+        @Deprecated
         public Object[] yield( Object[] yieldArgs ) throws InterruptedException
         {
             try
             {
                 LuaState state = m_state;
                 if( state == null ) throw new InterruptedException();
-                Varargs results = LuaThread.yieldBlocking( state, toValues( yieldArgs ) );
-                return toObjects( results, 1 );
+                throw new IllegalStateException( "Cannot yield on a single threaded environment." );
             }
-            catch( LuaError e )
+            catch( RuntimeException e )
             {
                 throw new IllegalStateException( e.getMessage() );
             }
         }
 
         @Override
+        @Deprecated
         public long issueMainThreadTask( @Nonnull final ILuaTask task ) throws LuaException
         {
+            /*
             // Issue command
             final long taskID = MainThread.getUniqueTaskID();
             final Runnable iTask = () -> {
@@ -558,9 +567,12 @@
             {
                 throw new LuaException( "Task limit exceeded" );
             }
+            */
+            throw new LuaException("Cannot issue tasks on a single threaded environment.");
         }
 
         @Override
+        @Deprecated
         public Object[] executeMainThreadTask( @Nonnull final ILuaTask task ) throws LuaException, InterruptedException
         {
             // Issue task
