--- original\CC-Tweaked\src\main\java\dan200\computercraft\core\lua\CobaltLuaMachine.java
+++ src\main\java\dan200\computercraft\core\lua\CobaltLuaMachine.java
@@ -9,11 +9,7 @@
 import dan200.computercraft.ComputerCraft;
 import dan200.computercraft.api.lua.*;
 import dan200.computercraft.core.computer.Computer;
-import dan200.computercraft.core.computer.MainThread;
 import dan200.computercraft.core.computer.TimeoutState;
-import dan200.computercraft.core.tracking.Tracking;
-import dan200.computercraft.core.tracking.TrackingField;
-import dan200.computercraft.shared.util.ThreadUtils;
 import org.squiddev.cobalt.*;
 import org.squiddev.cobalt.compiler.CompileException;
 import org.squiddev.cobalt.compiler.LoadState;
@@ -31,9 +27,6 @@
 import java.util.HashMap;
 import java.util.IdentityHashMap;
 import java.util.Map;
-import java.util.concurrent.SynchronousQueue;
-import java.util.concurrent.ThreadPoolExecutor;
-import java.util.concurrent.TimeUnit;
 
 import static org.squiddev.cobalt.ValueFactory.valueOf;
 import static org.squiddev.cobalt.ValueFactory.varargsOf;
@@ -42,12 +35,14 @@
 
 public class CobaltLuaMachine implements ILuaMachine
 {
+    /*
     private static final ThreadPoolExecutor COROUTINES = new ThreadPoolExecutor(
         0, Integer.MAX_VALUE,
         5L, TimeUnit.MINUTES,
         new SynchronousQueue<>(),
         ThreadUtils.factory( "Coroutine" )
     );
+    */
 
     private final Computer m_computer;
     private final TimeoutState timeout;
@@ -70,6 +65,7 @@
         LuaState state = m_state = LuaState.builder()
             .resourceManipulator( new VoidResourceManipulator() )
             .debug( debug )
+            /*
             .coroutineExecutor( command -> {
                 Tracking.addValue( m_computer, TrackingField.COROUTINES_CREATED, 1 );
                 COROUTINES.execute( () -> {
@@ -83,6 +79,7 @@
                     }
                 } );
             } )
+            */
             .build();
 
         m_globals = new LuaTable();
@@ -295,7 +292,7 @@
             // Start remembering stuff
             if( values == null )
             {
-                values = new IdentityHashMap<>();
+                values = new HashMap<>();
             }
             else if( values.containsKey( object ) )
             {
@@ -362,7 +359,7 @@
                 // Start remembering stuff
                 if( objects == null )
                 {
-                    objects = new IdentityHashMap<>();
+                    objects = new HashMap<>();
                 }
                 else if( objects.containsKey( value ) )
                 {
@@ -479,7 +476,6 @@
             if( timeout.isHardAborted() || state == null ) throw HardAbortError.INSTANCE;
 
             timeout.refresh();
-            if( timeout.isPaused() ) LuaThread.suspendBlocking( state );
             handleSoftAbort();
         }
 
@@ -505,24 +501,26 @@
     {
         @Nonnull
         @Override
+        @Deprecated
         public Object[] yield( Object[] yieldArgs ) throws InterruptedException
         {
             try
             {
                 LuaState state = m_state;
                 if( state == null ) throw new InterruptedException();
-                Varargs results = LuaThread.yieldBlocking( state, toValues( yieldArgs ) );
-                return toObjects( results, 1 );
+                throw new IllegalStateException( "Cannot yield on a single threaded environment." );
             }
-            catch( LuaError e )
+            catch( RuntimeException e )
             {
                 throw new IllegalStateException( e.getMessage() );
             }
         }
 
         @Override
+        @Deprecated
         public long issueMainThreadTask( @Nonnull final ILuaTask task ) throws LuaException
         {
+            /*
             // Issue command
             final long taskID = MainThread.getUniqueTaskID();
             final Runnable iTask = () -> {
@@ -562,9 +560,12 @@
             {
                 throw new LuaException( "Task limit exceeded" );
             }
+            */
+            throw new LuaException("Cannot issue tasks on a single threaded environment.");
         }
 
         @Override
+        @Deprecated
         public Object[] executeMainThreadTask( @Nonnull final ILuaTask task ) throws LuaException, InterruptedException
         {
             // Issue task
