--- original\CC-Tweaked\src\main\java\dan200\computercraft\core\computer\ComputerExecutor.java
+++ src\main\java\dan200\computercraft\core\computer\ComputerExecutor.java
@@ -5,6 +5,7 @@
  */
 package dan200.computercraft.core.computer;
 
+import cc.squiddev.cct.stub.ComputerThread;
 import dan200.computercraft.ComputerCraft;
 import dan200.computercraft.api.filesystem.IMount;
 import dan200.computercraft.api.filesystem.IWritableMount;
@@ -51,12 +52,11 @@
  * One final responsibility for the executor is calling {@link ILuaAPI#update()} every tick, via the {@link #tick()}
  * method. This should only be called when the computer is actually on ({@link #isOn}).
  */
-final class ComputerExecutor
+public final class ComputerExecutor
 {
     private static final int QUEUE_LIMIT = 256;
 
     private static IMount romMount;
-    private static final Object romMountLock = new Object();
 
     private final Computer computer;
     private final List<ILuaAPI> apis = new ArrayList<>();
@@ -74,7 +74,7 @@
      */
     private volatile boolean isOn = false;
 
-    /**
+    /*
      * The lock to acquire when you need to modify the "on state" of a computer.
      *
      * We hold this lock when running any command, and attempt to hold it when updating APIs. This ensures you don't
@@ -85,13 +85,11 @@
      * @see #turnOn()
      * @see #shutdown()
      */
-    private final ReentrantLock isOnLock = new ReentrantLock();
 
-    /**
+    /*
      * A lock used for any changes to {@link #eventQueue}, {@link #command} or {@link #onComputerQueue}. This will be
      * used on the main thread, so locks should be kept as brief as possible.
      */
-    private final Object queueLock = new Object();
 
     /**
      * Determines if this executor is present within {@link ComputerThread}.
@@ -100,7 +98,7 @@
      * @see #enqueue()
      * @see #afterWork()
      */
-    volatile boolean onComputerQueue = false;
+    public volatile boolean onComputerQueue = false;
 
     /**
      * The amount of time this computer has used on a theoretical machine which shares work evenly amongst computers.
@@ -151,18 +149,16 @@
 
     private IWritableMount rootMount;
 
-    /**
+    /*
      * The thread the executor is running on. This is non-null when performing work. We use this to ensure we're only
      * doing one bit of work at one time.
      *
      * @see ComputerThread
      */
-    final AtomicReference<Thread> executingThread = new AtomicReference<>();
 
     ComputerExecutor( Computer computer )
     {
         // Ensure the computer thread is running as required.
-        ComputerThread.start();
 
         this.computer = computer;
 
@@ -210,7 +206,6 @@
      */
     void queueStart()
     {
-        synchronized( queueLock )
         {
             // We should only schedule a start if we're not currently on and there's turn on.
             if( closed || isOn || command != null ) return;
@@ -229,7 +224,6 @@
      */
     void queueStop( boolean reboot, boolean close )
     {
-        synchronized( queueLock )
         {
             if( closed ) return;
             closed = close;
@@ -258,7 +252,6 @@
         ILuaMachine machine = this.machine;
         if( machine != null ) machine.close();
 
-        synchronized( queueLock )
         {
             if( closed ) return;
             command = StateCommand.ABORT;
@@ -277,7 +270,6 @@
         // Events should be skipped if we're not on.
         if( !isOn ) return;
 
-        synchronized( queueLock )
         {
             // And if we've got some command in the pipeline, then don't queue events - they'll
             // probably be disposed of anyway.
@@ -294,7 +286,6 @@
      */
     private void enqueue()
     {
-        synchronized( queueLock )
         {
             if( !onComputerQueue ) ComputerThread.queue( this );
         }
@@ -305,7 +296,7 @@
      */
     void tick()
     {
-        if( isOn && isOnLock.tryLock() )
+        if( isOn )
         {
             // This horrific structure means we don't try to update APIs while the state is being changed
             // (and so they may be running startup/shutdown).
@@ -321,7 +312,6 @@
             }
             finally
             {
-                isOnLock.unlock();
             }
         }
     }
@@ -330,7 +320,6 @@
     {
         if( romMount != null ) return romMount;
 
-        synchronized( romMountLock )
         {
             if( romMount != null ) return romMount;
             return romMount = computer.getComputerEnvironment().createResourceMount( "computercraft", "lua/rom" );
@@ -416,13 +405,11 @@
 
     private void turnOn() throws InterruptedException
     {
-        isOnLock.lockInterruptibly();
         try
         {
             // Reset the terminal and event queue
             computer.getTerminal().reset();
             interruptedEvent = false;
-            synchronized( queueLock )
             {
                 eventQueue.clear();
             }
@@ -451,7 +438,6 @@
         }
         finally
         {
-            isOnLock.unlock();
         }
 
         // Now actually start the computer, now that everything is set up.
@@ -460,12 +446,10 @@
 
     private void shutdown() throws InterruptedException
     {
-        isOnLock.lockInterruptibly();
         try
         {
             isOn = false;
             interruptedEvent = false;
-            synchronized( queueLock )
             {
                 eventQueue.clear();
             }
@@ -493,14 +477,13 @@
         }
         finally
         {
-            isOnLock.unlock();
         }
     }
 
     /**
      * Called before calling {@link #work()}, setting up any important state.
      */
-    void beforeWork()
+    public void beforeWork()
     {
         vRuntimeStart = System.nanoTime();
         timeout.startTimer();
@@ -511,7 +494,7 @@
      *
      * @return If we have more work to do.
      */
-    boolean afterWork()
+    public boolean afterWork()
     {
         if( interruptedEvent )
         {
@@ -526,7 +509,6 @@
 
         if( interruptedEvent ) return true;
 
-        synchronized( queueLock )
         {
             if( eventQueue.isEmpty() && command == null ) return onComputerQueue = false;
             return true;
@@ -542,7 +524,7 @@
      * @see #command
      * @see #eventQueue
      */
-    void work() throws InterruptedException
+    public void work() throws InterruptedException
     {
         if( interruptedEvent )
         {
@@ -556,7 +538,6 @@
 
         StateCommand command;
         Event event = null;
-        synchronized( queueLock )
         {
             command = this.command;
             this.command = null;
