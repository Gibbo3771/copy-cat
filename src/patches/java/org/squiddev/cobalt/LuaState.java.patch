--- original\Cobalt\src\main\java\org\squiddev\cobalt\LuaState.java
+++ src\main\java\org\squiddev\cobalt\LuaState.java
@@ -30,6 +30,7 @@
 import org.squiddev.cobalt.debug.DebugHandler;
 import org.squiddev.cobalt.lib.platform.FileResourceManipulator;
 import org.squiddev.cobalt.lib.platform.ResourceManipulator;
+import org.squiddev.cobalt.lib.platform.VoidResourceManipulator;
 
 import java.io.InputStream;
 import java.io.PrintStream;
@@ -124,14 +125,7 @@
 	private LuaThread mainThread;
 
 	/**
-	 * The currently active {@link YieldThreader}.
-	 */
-	final YieldThreader threader;
-
-	/**
 	 * If this state has been abandoned, and threads should be cleaned up.
-	 *
-	 * @see LuaThread#orphanCheckInterval
 	 */
 	boolean abandoned;
 
@@ -153,7 +147,6 @@
 		this.random = builder.random;
 		this.debug = builder.debug;
 		this.timezone = builder.timezone;
-		this.threader = new YieldThreader(builder.coroutineExecutor);
 	}
 
 	/**
@@ -210,10 +203,6 @@
 	 * A mutable builder for {@link LuaState}s.
 	 */
 	public static class Builder {
-		private static final AtomicInteger coroutineCount = new AtomicInteger();
-		private static final Executor defaultCoroutineExecutor = Executors.newCachedThreadPool(command ->
-			new Thread(command, "Coroutine-" + coroutineCount.getAndIncrement()));
-
 		private InputStream stdin = System.in;
 		private PrintStream stdout = System.out;
 		private LuaTable stringMetatable;
@@ -222,12 +211,11 @@
 		private LuaTable nilMetatable;
 		private LuaTable functionMetatable;
 		private LuaTable threadMetatable;
-		private ResourceManipulator resourceManipulator = new FileResourceManipulator();
+		private ResourceManipulator resourceManipulator = new VoidResourceManipulator();
 		private LoadState.LuaCompiler compiler = LuaC.INSTANCE;
 		private Random random = new Random();
 		private DebugHandler debug = DebugHandler.INSTANCE;
 		private TimeZone timezone = TimeZone.getDefault();
-		private Executor coroutineExecutor = defaultCoroutineExecutor;
 
 		/**
 		 * Build a Lua state from this builder
@@ -391,18 +379,5 @@
 			this.timezone = zone;
 			return this;
 		}
-
-
-		/**
-		 * Set the coroutine executor for this state.
-		 *
-		 * @param coroutineExecutor The new executor
-		 * @return This builder
-		 */
-		public Builder coroutineExecutor(Executor coroutineExecutor) {
-			if (coroutineExecutor == null) throw new NullPointerException("coroutineExecutor cannot be null");
-			this.coroutineExecutor = coroutineExecutor;
-			return this;
-		}
 	}
 }
